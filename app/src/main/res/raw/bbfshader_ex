//
//  bbfshader_ex
//  Brighter and Bigger
//
//  Created by Kazunori Asada on 2019/08/20.
//  Copyright 2010-2019 Kazunori Asada. All rights reserved.
//

#extension GL_OES_EGL_image_external : require

precision mediump float;

uniform samplerExternalOES sTexture;
varying vec4 vTextureCoord;
uniform float brightness;
uniform float contrast;
uniform int reverse, monoMode;
uniform vec3 monoLightColor;
uniform vec3 monoDarkColor;

void main()
{
	const mat3 matRGBtoLMS = mat3(	// Convert from RGB to LMS
		0.313935103000000,	0.639568792000000,	0.0465221350000000,
		0.155302922000000,	0.757959424000000,	0.0867268040000000,
		0.0177216460000000,	0.109451824000000,	0.872768110000000
	);

	const mat3 matLMStoRGB = mat3(		// Convert from LMS to RGB
		5.47213088809908, -4.64189045809668, 0.169576672588330,
		-1.12464246757831, 2.29254888866891, -0.167862078994379,
		0.0299266238769310,	-0.193249175894864,	1.16338764138036
	);

    const mat3 matLMStoXYZ = mat3(	// Convert from XYZ to LMS
        1.85995, -1.12939, 0.21990,
        0.36119, 0.63881, 0.0,
        0.0, 0.0, 1.08906
    );

	const mat3 matXYZtoLMS = mat3(	// Convert from LMS to XYZ
        0.40024, 0.70760, -0.08081,
        -0.22630, 1.16532, 0.04570,
        0.0, 0.0, 0.91822
    );

    const mat3 matRGBtoXYZ = mat3(	// Convert from XYZ to LMS
        0.4124, 0.3576, 0.1805,
        0.2126, 0.7152, 0.0722,
        0.0193, 0.1192, 0.9505
    );

	const mat3 matXYZtoRGB = mat3(	// Convert from LMS to XYZ
        3.2406, -1.5372, -0.4986,
        -0.9689, 1.8757, 0.0415,
        0.0557, -0.2040, 1.0570
    );

	vec4 newTex = vTextureCoord.xyzw;
    vec4 col = clamp(texture2DProj(sTexture, newTex).rgba, 0.0, 1.0);

    vec3 z;
	float udash, vdash;
	vec3 luv;
    float lstar;

    z = col.rgb;

    z = clamp(pow((z + 0.055) / 1.055, vec3(2.4)), 0.0, 1.0) * matRGBtoXYZ;


    if (length(z) != 0.0) {
        udash = 4.0 * z.x / (z.x + 15.0 * z.y + 3.0 * z.z);
        vdash = 9.0 * z.y / (z.x + 15.0 * z.y + 3.0 * z.z);
    } else {
        udash = 0.19784;
        vdash = 0.46832;
    }

    if (z.y < 0.0088565) {
        lstar = 9.033 * z.y;
    } else {
        lstar = 1.16 * pow(z.y, 1.0 / 3.0) - 0.16;
    }

    // luv.y = 13.0 * luv.x * (udash - 0.19784);
    // luv.z = 13.0 * luv.x * (vdash - 0.46832);

// change brightness and contrast and reverse
// change brightness

    lstar = lstar + brightness;

// change contrast

    float t0, y0, y1;

    t0 = contrast * 20.0 + 1.0;
    y0 = 1.0 / (1.0 + exp(t0));
    y1 = 1.0 / (1.0 + exp((1.0 - 2.0 * lstar) * t0));
    lstar = (y1 - y0) / (1.0 - y0 * 2.0);

// reverse

    lstar = float(reverse) * (1.0 - lstar) + float(1 - reverse) * lstar;

// monochrome mode

    vec3 z2, z3;
    float udash1, udash2, vdash1, vdash2;
    if (monoMode != 0) {
        z2 = clamp(pow((monoLightColor + 0.055) / 1.055, vec3(2.4)), 0.0, 1.0) * matRGBtoXYZ;
        udash1 = 0.19784;
        vdash1 = 0.46832;
        if (length(monoLightColor) != 0.0) {
            udash1 = 4.0 * z2.x / (z2.x + 15.0 * z2.y + 3.0 * z2.z);
            vdash1 = 9.0 * z2.y / (z2.x + 15.0 * z2.y + 3.0 * z2.z);
        }

        vec3 z3;
        z3 = clamp(pow((monoDarkColor + 0.055) / 1.055, vec3(2.4)), 0.0, 1.0) * matRGBtoXYZ;
        udash2 = 0.19784;
        vdash2 = 0.46832;
        if (length(monoDarkColor) != 0.0) {
            udash2 = 4.0 * z3.x / (z3.x + 15.0 * z3.y + 3.0 * z3.z);
            vdash2 = 9.0 * z3.y / (z3.x + 15.0 * z3.y + 3.0 * z3.z);
        }
        udash = mix(udash2, udash1, lstar);
        vdash = mix(vdash2, vdash1, lstar);
    }
// end change brightness and contrast and reverse

    if (lstar <= 0.08) {
        z.y = lstar * 0.11071;
    } else {
        z.y = pow((lstar + 0.16) / 1.16, 3.0);
    }
    z.x = (z.y * 9.0 * udash) / (4.0 * vdash);
    z.z = z.y * (12.0 - 3.0 * udash - 20.0 * vdash) / (4.0 * vdash);

	z = clamp(1.055 * pow(z * matXYZtoRGB, vec3(1.0 / 2.4)) - 0.055, 0.0, 1.0);

	gl_FragColor.rgb = z;
	gl_FragColor.a = 1.0;
}